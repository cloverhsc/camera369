# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-02-12 09:30
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Required ! 254 or fewer, Letter, digits and @/./-/_ only.', max_length=254, unique=True, verbose_name='email')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='Last name')),
                ('sex', models.CharField(blank=True, max_length=1, null=True, verbose_name='sex')),
                ('register_date', models.DateField(auto_now_add=True)),
                ('modify_date', models.DateField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active, Unselect this. instead of deleteing accounts.', verbose_name='active')),
                ('is_manager', models.BooleanField(default=False, help_text='No manager role.', verbose_name='manager user')),
                ('is_staff', models.BooleanField(default=True, help_text='All client role.', verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
        ),
    ]
